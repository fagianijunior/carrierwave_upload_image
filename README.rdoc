== Upload de imagem com carrierwave - Rails 4 ==

Carrierwave é uma gem rails, que facilita o upload de iagem para o servidor
nesse exemplo criei uma tabala empregado (employee) com os campos name:string e image:string

Criando o projeto:
$ rails g carrierwave_upload_image -d mysql
$ cd carrierwave_upload_image

Adicione a gem ao Gemfile
$ nano Gemfile
  - adicione:
    gem 'carrierwave'

Instale a gem
$ bundle install

Crie o MVC para empregado
$ rails g scaffold employee name:string image:string

Edite o model do empregado
$ nano app/model/employee.rb
  - adicione:
    mount_uploader :image, ImageUploader

  - ficando assim
    class Employee < ActiveRecord::Base
      mount_uploader :image, ImageUploader
    end

Crie o uploader para image
$ rails g uploader image

Edite o uploader de image
$ nano app/uploaders/image_uploader.rb
  - Descomente o seguinte trecho, para ter a opção de gerar thumbs:
    include CarrierWave::RMagick

  - Adicione esse trecho
    version :thumb do
      process :resize_to_limit => [200, 200]
    end

  - Será necessário possuir instalado em seu linux a ferramta 'libmagickwand-dev'
    $ sudo apt-get install libmagickwand-dev

Edite employee/show.html.erb
$ nano app/view/employee/show.html.erb

  - adicione a tag para exibir a imagem
    <%= image_tag @employee.image_url( :thumb ) if @employee.image? %>

Edite employee/_form.html.erb
$ nano app/view/employee/_form.html.erb

  - adicione ao form
    :html => {:multipart => true}

  - adicione a tag para receber a imagem
    <%= f.file_field :image %>
    
  * Ficando assim
    <%= form_for(@employee, :html => {:multipart => true}) do |f| %>
      <div class="field">
        <%= f.label :name %><br>
        <%= f.text_field :name %>
      </div>
      <div class="field">
        <%= f.label :image %><br>
        <%= f.file_field :image %>
      </div>
      <div class="actions">
        <%= f.submit %>
      </div>
    <% end %>

Pronto upload de imagem simples e fácil com rails 4 ecarrierwave,
as imagens ficam organizadas dentro da pasta public/uploads/. Essa 
pasta pode ser configurada no arquivo app/uploaders/image_uploader.rb,
assim como o nome do arquivo salvo.

